#!/usr/bin/env bash
# This script was generated by bashly 1.0.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  resource=${args[resource]}
  name=${args[name]}
  targetName=${args[targetName]}
  namespace=${args[--namespace]}

  if [[ $namespace ]]; then
      kubectl get -n $namespace $resource $name -o json \
          | jq --arg targetName "$targetName" '.metadata.name = $targetName' \
          | kubectl apply -f - && \
      kubectl delete -n $namespace $resource $name
  else

      kubectl get $resource $name -o json \
          | jq --arg targetName "$targetName" '.metadata.name = $targetName' \
          | kubectl apply -f - && \
      kubectl delete $resource $name
  fi
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
kuberen_usage() {
  if [[ -n $long_usage ]]; then
    printf "kuberen - Simple tool to rename Kubernetes resources\n"
    echo

  else
    printf "kuberen - Simple tool to rename Kubernetes resources\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  kuberen RESOURCE NAME TARGETNAME [OPTIONS]\n"
  printf "  kuberen --help | -h\n"
  printf "  kuberen --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--namespace, -n NAMESPACE"
    printf "    Namespace (default: default)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "RESOURCE"
    printf "    Kubernetes resource type\n"
    echo

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Current name of the resources\n"
    echo

    # :argument.usage
    printf "  %s\n" "TARGETNAME"
    printf "    Target name of the resources\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  kuberen deployment my-app my-app-1\n"
    printf "  kuberen secret token token-old -n kube-system\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        kuberen_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    printf "%s\n" "Missing jq tool. Install it before you start using kuberen" >&2
    exit 1
  fi

  if command -v kubectl >/dev/null 2>&1; then
    deps['kubectl']="$(command -v kubectl | head -n1)"
  else
    printf "missing dependency: kubectl\n" >&2
    printf "%s\n" "Missing kubectl tool. Install it before you start using kuberen" >&2
    exit 1
  fi

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --namespace | -n)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--namespace']="$2"
          shift
          shift
        else
          printf "%s\n" "--namespace requires an argument: --namespace, -n NAMESPACE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['resource']+x} ]]; then

          args['resource']=$1
          shift
        elif [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        elif [[ -z ${args['targetName']+x} ]]; then

          args['targetName']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['resource']+x} ]]; then
    printf "missing required argument: RESOURCE\nusage: kuberen RESOURCE NAME TARGETNAME [OPTIONS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: kuberen RESOURCE NAME TARGETNAME [OPTIONS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['targetName']+x} ]]; then
    printf "missing required argument: TARGETNAME\nusage: kuberen RESOURCE NAME TARGETNAME [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root")
      root_command
      ;;

  esac
}

initialize
run "$@"
